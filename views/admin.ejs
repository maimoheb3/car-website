<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>MIU Auto Hub - Admin Panel</title>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css"
      rel="stylesheet"
    />

    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />

    <link
      href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@400;700&family=Poppins:wght@300;400;500;600&display=swap"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/css/main.css" />

    <style>
      .sidebar {
        min-height: 100vh;
        background: linear-gradient(
          135deg,
          var(--primary-color),
          var(--secondary-color)
        );
      }
      .nav-link:hover {
        background-color: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
      }
      .card {
        border: none;
        box-shadow: 0 0.15rem 1.75rem 0 rgba(33, 40, 50, 0.15);
      }
      .border-left-primary {
        border-left: 0.25rem solid #4e73df !important;
      }
      .border-left-success {
        border-left: 0.25rem solid #1cc88a !important;
      }
      .active-page {
        background-color: rgba(255, 255, 255, 0.2) !important;
        border-radius: 5px;
      }
      .car-image-preview {
        max-width: 200px;
        max-height: 150px;
        object-fit: cover;
        border-radius: 5px;
      }
    </style>
  </head>
  <body>
    <div id="app">
      <div class="container-fluid">
        <div class="row">
          <!-- Sidebar -->
          <div class="col-auto px-0 sidebar">
            <div
              class="d-flex flex-column align-items-center align-items-sm-start px-3 pt-3 text-white min-vh-100"
            >
              <a
                href="#"
                class="d-flex align-items-center pb-3 mb-md-0 me-md-auto text-white text-decoration-none border-bottom"
              >
                <i class="fas fa-car me-2"></i>
                <span class="fs-5 d-none d-sm-inline">MIU Auto Hub Admin</span>
              </a>
              <ul
                class="nav nav-pills flex-column mb-sm-auto mb-0 align-items-center align-items-sm-start w-100 mt-3"
                id="menu"
              >
                <li class="nav-item px-0 w-100 my-2">
                  <button
                    class="nav-link px-0 align-middle text-white w-100"
                    onclick="showPage('dashboard')"
                  >
                    <i class="fas fa-home fs-5 me-2"></i>
                    <span class="ms-1 d-none d-sm-inline">Dashboard</span>
                  </button>
                </li>
                <li class="w-100 my-2">
                  <button
                    class="nav-link px-0 align-middle text-white w-100"
                    onclick="showPage('users')"
                  >
                    <i class="fas fa-users fs-5 me-2"></i>
                    <span class="ms-1 d-none d-sm-inline">Users</span>
                  </button>
                </li>
                <li class="w-100 my-2">
                  <button
                    class="nav-link px-0 align-middle text-white w-100"
                    onclick="showPage('cars')"
                  >
                    <i class="fas fa-car fs-5 me-2"></i>
                    <span class="ms-1 d-none d-sm-inline">Cars</span>
                  </button>
                </li>
                <li class="w-100 my-2">
                  <button
                    class="nav-link px-0 align-middle text-white w-100"
                    onclick="showPage('orders')"
                  >
                    <i class="fas fa-shopping-cart fs-5 me-2"></i>
                    <span class="ms-1 d-none d-sm-inline">Orders</span>
                  </button>
                </li>
              </ul>
              <div class="pb-4">
                <a
                  href="/api/user/logout"
                  class="d-flex align-items-center text-white text-decoration-none"
                >
                  <i class="fas fa-sign-out-alt fs-5 me-2"></i>
                  Log out
                </a>
              </div>
            </div>
          </div>

          <!-- Main Content -->
          <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 py-4">
            <!-- Dashboard Page -->
            <div id="dashboard-page" class="page-content">
              <h1 class="h2 mb-4">Dashboard</h1>

              <div class="row">
                <div class="col-md-3 mb-4">
                  <div class="card border-left-primary shadow h-100 py-2">
                    <div class="card-body">
                      <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                          <div
                            class="text-xs fw-bold text-primary text-uppercase mb-1"
                          >
                            Total Users
                          </div>
                          <div
                            class="h5 mb-0 fw-bold text-gray-800"
                            id="totalUsers"
                          >
                          <%= users.length %>
                          </div>
                        </div>
                        <div class="col-auto">
                          <i class="fas fa-users fs-2 text-gray-300"></i>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div class="col-md-3 mb-4">
                  <div class="card border-left-success shadow h-100 py-2">
                    <div class="card-body">
                      <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                          <div
                            class="text-xs fw-bold text-success text-uppercase mb-1"
                          >
                            Total Cars
                          </div>
                          <div
                            class="h5 mb-0 fw-bold text-gray-800"
                            id="totalCars"
                          >
                            <%= cars.length %>
                          </div>
                        </div>
                        <div class="col-auto">
                          <i class="fas fa-car fs-2 text-gray-300"></i>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="col-md-3 mb-4">
                  <div class="card border-left-info shadow h-100 py-2">
                    <div class="card-body">
                      <div class="row no-gutters align-items-center">
                        <div class="col me-2">
                          <div
                            class="text-xs fw-bold text-info text-uppercase mb-1"
                          >
                            Total Orders
                          </div>
                          <div
                            class="h5 mb-0 fw-bold text-gray-800"
                            id="totalOrders"
                          >
                          <%= orders.length %>
                          </div>
                        </div>
                        <div class="col-auto">
                          <i
                            class="fas fa-shopping-cart fs-2 text-gray-300"
                          ></i>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Users Page -->
            <div id="users-page" class="page-content" style="display: none">
              <div
                class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"
              >
                <h1 class="h2">User Management</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                  <button
                    type="button"
                    class="btn btn-sm btn-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#addUserModal"
                  >
                    <i class="fas fa-user-plus"></i> Add New User
                  </button>
                </div>
              </div>

              <div class="card shadow mb-4">
                <div class="card-body">
                  <div class="table-responsive">
                    <table
                      class="table table-bordered"
                      id="usersTable"
                      width="100%"
                      cellspacing="0"
                    >
                      <thead>
                        <tr>
                          <th>No.</th>
                          <th>ID</th>
                          <th>Name</th>
                          <th>Email</th>
                          <th>Role</th>
                          <th>Status</th>
                        </tr>
                      </thead>
                      <tbody id="usersTableBody">
                        <% users.forEach((user, index) => { %>
                        <tr>
                          <td><%= index + 1 %></td>
                          <td>....<%= user._id.toString().slice(-5) %></td>
                          <td><%= user.name %></td>
                          <td><%= user.email %></td>
                          <td>
                            <span
                              class="badge <%= user.role === 'admin' ? 'bg-success' : 'bg-primary' %>"
                              ><%= user.role %></span
                            >
                          </td>
                          <td>
                            <button
                              class="btn btn-sm btn-outline-primary me-1 edit-user"
                              data-userId="<%= user._id %>"
                            >
                              <i class="fas fa-edit"></i>
                            </button>
                            <% if (user.role !== 'admin') { %>
                            <button
                              class="btn btn-sm btn-outline-danger delete-user"
                              data-userId="<%= user._id %>"
                            >
                              <i class="fas fa-trash"></i>
                            </button>
                            <% } %>
                          </td>
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>

            <!-- Cars Page -->
            <div id="cars-page" class="page-content" style="display: none">
              <div
                class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom"
              >
                <h1 class="h2">Car Management</h1>
                <div class="btn-toolbar mb-2 mb-md-0">
                  <button
                    type="button"
                    class="btn btn-sm btn-primary"
                    data-bs-toggle="modal"
                    data-bs-target="#addCarModal"
                  >
                    <i class="fas fa-plus"></i> Add New Car
                  </button>
                </div>
              </div>

              <div class="card shadow mb-4">
                <div class="card-body">
                  <div class="table-responsive">
                    <table
                      class="table table-bordered"
                      id="carsTable"
                      width="100%"
                      cellspacing="0"
                    >
                      <thead>
                        <tr>
                          <th>No.</th>
                          <th>ID</th>
                          <th>Make</th>
                          <th>Model</th>
                          <th>Price</th>
                          <th>Stock</th>
                          <th>Category</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody id="carsTableBody">
                        <% cars.forEach((car, index) => { %>
                        <tr>
                          <td><%= index + 1 %></td>
                          <td>....<%= car._id.toString().slice(-5) %></td>
                          <td><%= car.make %></td>
                          <td><%= car.model %></td>
                          <td>$<%= car.price %></td>
                          <td><%= car.stock %></td>
                          <td><%= car.category %></td>
                          <td>
                            <button
                              class="btn btn-sm btn-outline-primary me-1 edit-car"
                              data-carId="<%= car._id %>"
                            >
                              <i class="fas fa-edit"></i>
                            </button>

                            <button
                              class="btn btn-sm btn-outline-danger delete-car"
                              data-carId="<%= car._id %>"
                            >
                              <i class="fas fa-trash"></i>
                            </button>
                          </td>
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>

            <!-- Orders Page -->
            <div id="orders-page" class="page-content" style="display: none">
              <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                <h1 class="h2">Order Management</h1>
              </div>

              <div class="card shadow mb-4">
                <div class="card-body">
                  <div class="table-responsive">
                    <table class="table table-bordered" id="ordersTable" width="100%" cellspacing="0">
                      <thead>
                        <tr>
                          <th>No.</th>
                          <th>Order ID</th>
                          <th>Customer</th>
                          <th>Total Amount</th>
                          <th>Status</th>
                          <th>Date</th>
                          <th>Actions</th>
                        </tr>
                      </thead>
                      <tbody id="ordersTableBody">
                        <% orders.forEach((order, index) => { %>
                        <tr>
                          <td><%= index + 1 %></td>
                          <td>....<%= order._id.toString().slice(-5) %></td>
                          <td><%= order.user.name %></td>
                          <td>$<%= order.totalAmount %></td>
                          <td>
                            <select class="form-select form-select-sm status-select" data-orderId="<%= order._id %>" style="width: 120px;">
                              <option value="pending" <%= order.status === 'pending' ? 'selected' : '' %>>Pending</option>
                              <option value="shipped" <%= order.status === 'shipped' ? 'selected' : '' %>>Shipped</option>
                              <option value="delivered" <%= order.status === 'delivered' ? 'selected' : '' %>>Delivered</option>
                            </select>
                          </td>
                          <td><%= new Date(order.createdAt).toLocaleDateString() %></td>
                          <td>
                            <button class="btn btn-sm btn-outline-primary me-1 view-order" data-orderId="<%= order._id %>">
                              <i class="fas fa-eye"></i>
                            </button>
                            <button class="btn btn-sm btn-outline-danger delete-order" data-orderId="<%= order._id %>">
                              <i class="fas fa-trash"></i>
                            </button>
                          </td>
                        </tr>
                        <% }) %>
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </main>
        </div>
      </div>

      <!-- Add User Modal -->
      <div
        class="modal fade"
        id="addUserModal"
        tabindex="-1"
        aria-labelledby="addUserModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addUserModalLabel">Add New User</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body">
              <form id="addUserForm">
                <div class="mb-3">
                  <label for="userName" class="form-label">Name</label>
                  <input
                    type="text"
                    class="form-control"
                    id="userName"
                    name="name"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="userEmail" class="form-label">Email</label>
                  <input
                    type="email"
                    class="form-control"
                    id="userEmail"
                    name="email"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="userPassword" class="form-label">Password</label>
                  <input
                    type="password"
                    class="form-control"
                    id="userPassword"
                    name="password"
                    required
                  />
                </div>
                <div class="mb-3">
                  <label for="userRole" class="form-label">Role</label>
                  <select
                    class="form-select"
                    id="userRole"
                    name="role"
                    required
                  >
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                  </select>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button type="submit" form="addUserForm" class="btn btn-primary">
                Add User
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Add Car Modal -->
      <div
        class="modal fade"
        id="addCarModal"
        tabindex="-1"
        aria-labelledby="addCarModalLabel"
        aria-hidden="true"
      >
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="addCarModalLabel">Add New Car</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
              ></button>
            </div>
            <div class="modal-body">
              <form
                class="needs-validation"
                id="addCarForm"
                enctype="multipart/form-data"
                novalidate
              >
                <div class="mb-3">
                  <label for="carMake" class="form-label">Make</label>
                  <input
                    type="text"
                    class="form-control"
                    id="carMake"
                    name="make"
                    required
                    maxlength="50"
                  />
                </div>

                <div class="mb-3">
                  <label for="carModel" class="form-label">Model</label>
                  <input
                    type="text"
                    class="form-control"
                    id="carModel"
                    name="model"
                    required
                    maxlength="50"
                  />
                </div>

                <div class="mb-3">
                  <label for="carPrice" class="form-label">Price</label>
                  <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input
                      type="number"
                      class="form-control"
                      id="carPrice"
                      name="price"
                      required
                      min="0"
                      step="0.01"
                    />
                  </div>
                </div>

                <div class="mb-3">
                  <label for="carStock" class="form-label">Stock</label>
                  <input
                    type="number"
                    class="form-control"
                    id="carStock"
                    name="stock"
                    min="0"
                    step="1"
                    required
                  />
                </div>

                <div class="mb-3">
                  <label for="carDescription" class="form-label"
                    >Description</label
                  >
                  <textarea
                    class="form-control"
                    id="carDescription"
                    name="description"
                    rows="3"
                    maxlength="1000"
                  ></textarea>
                </div>

                <div class="mb-3">
                  <label for="carCategory" class="form-label">Category</label>
                  <select
                    class="form-select"
                    id="carCategory"
                    name="category"
                    required
                  >
                    <option value="">Select Category</option>
                    <option value="Sedan">Sedan</option>
                    <option value="SUV">SUV</option>
                    <option value="Truck">Truck</option>
                    <option value="Sports Car">Sports Car</option>
                    <option value="Luxury">Luxury</option>
                    <option value="Electric">Electric</option>
                    <option value="Hybrid">Hybrid</option>
                  </select>
                </div>

                <div class="mb-3">
                  <label for="carImage" class="form-label"
                    >Car Image</label
                  >
                  <input
                    type="file"
                    class="form-control"
                    id="carImage"
                    name="image"
                    accept="image/jpeg,image/png,image/gif"
                    required
                  />
                  <div class="form-text">
                    Upload a car image (JPG, PNG, or GIF)
                  </div>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button
                type="button"
                class="btn btn-secondary"
                data-bs-dismiss="modal"
              >
                Close
              </button>
              <button type="submit" form="addCarForm" class="btn btn-primary">
                Add Car
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Edit User Modal -->
      <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <form id="editUserForm">
                <input type="hidden" id="editUserId" name="userId">
                <div class="mb-3">
                  <label for="editUserName" class="form-label">Name</label>
                  <input type="text" class="form-control" id="editUserName" name="name" required>
                </div>
                <div class="mb-3">
                  <label for="editUserEmail" class="form-label">Email</label>
                  <input type="email" class="form-control" id="editUserEmail" name="email" required>
                </div>
                <div class="mb-3">
                  <label for="editUserRole" class="form-label">Role</label>
                  <select class="form-select" id="editUserRole" name="role" required>
                    <option value="user">User</option>
                    <option value="admin">Admin</option>
                  </select>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" form="editUserForm" class="btn btn-primary">Save Changes</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Edit Car Modal -->
      <div class="modal fade" id="editCarModal" tabindex="-1" aria-labelledby="editCarModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editCarModalLabel">Edit Car</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <form id="editCarForm" enctype="multipart/form-data">
                <input type="hidden" id="editCarId" name="carId">
                <div class="mb-3">
                  <label for="editCarMake" class="form-label">Make</label>
                  <input type="text" class="form-control" id="editCarMake" name="make" required maxlength="50">
                </div>
                <div class="mb-3">
                  <label for="editCarModel" class="form-label">Model</label>
                  <input type="text" class="form-control" id="editCarModel" name="model" required maxlength="50">
                </div>
                <div class="mb-3">
                  <label for="editCarPrice" class="form-label">Price</label>
                  <div class="input-group">
                    <span class="input-group-text">$</span>
                    <input type="number" class="form-control" id="editCarPrice" name="price" required min="0" step="0.01">
                  </div>
                </div>
                <div class="mb-3">
                  <label for="editCarStock" class="form-label">Stock</label>
                  <input type="number" class="form-control" id="editCarStock" name="stock" min="0" step="1" required>
                </div>
                <div class="mb-3">
                  <label for="editCarDescription" class="form-label">Description</label>
                  <textarea class="form-control" id="editCarDescription" name="description" rows="3" maxlength="1000"></textarea>
                </div>
                <div class="mb-3">
                  <label for="editCarCategory" class="form-label">Category</label>
                  <select class="form-select" id="editCarCategory" name="category" required>
                    <option value="">Select Category</option>
                    <option value="Sedan">Sedan</option>
                    <option value="SUV">SUV</option>
                    <option value="Truck">Truck</option>
                    <option value="Sports Car">Sports Car</option>
                    <option value="Luxury">Luxury</option>
                    <option value="Electric">Electric</option>
                    <option value="Hybrid">Hybrid</option>
                  </select>
                </div>
                <div class="mb-3">
                  <label for="editCarImage" class="form-label">Car Image</label>
                  <input type="file" class="form-control" id="editCarImage" name="image" accept="image/jpeg,image/png,image/gif">
                  <div class="form-text">Upload a new car image (JPG, PNG, or GIF) or leave empty to keep current image</div>
                  <div id="currentCarImage" class="mt-2"></div>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              <button type="submit" form="editCarForm" class="btn btn-primary">Save Changes</button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // Page navigation
      function showPage(pageId) {
        document.querySelectorAll(".page-content").forEach((page) => {
          page.style.display = "none";
        });
        document.querySelectorAll("#menu .nav-link").forEach((link) => {
          link.classList.remove("active-page");
        });
        document.getElementById(pageId + "-page").style.display = "block";
        event.target.closest(".nav-link").classList.add("active-page");
        if (pageId === "dashboard") {
          updateDashboardStats();
        }
      }
    </script>

    <script>
      document
        .getElementById("addUserForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const formData = new FormData(this);
          const userData = {
            name: formData.get("name"),
            email: formData.get("email"),
            password: formData.get("password"),
            role: formData.get("role"),
          };

          // Basic validation
          if (!userData.name || !userData.email || !userData.password) {
            alert("Please fill in all required fields");
            return;
          }

          // Email validation
          const emailRegex = /^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/;
          if (!emailRegex.test(userData.email)) {
            alert("Please enter a valid email address");
            return;
          }

          // Password validation
          if (userData.password.length < 6) {
            alert("Password must be at least 6 characters long");
            return;
          }

          // Send to backend
          const response = await fetch("/api/user/signup", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(userData),
          });
          const data = await response.json();

          if (response.ok) {
            alert("User added successfully");
            location.reload(); // Refresh to show new user
          } else {
            alert(data.errors || "Error adding user");
          }
        });

      document.querySelectorAll(".delete-user").forEach((button) => {
        button.addEventListener("click", async function (e) {
          e.preventDefault();
          const userId = this.getAttribute("data-userId");
          if (!confirm("Are you sure you want to delete this user?")) return;
          const response = await fetch(`/api/user/${userId}`, {
            headers: {
              "Content-Type": "application/json",
            },
            method: "DELETE",
          });
          const data = await response.json();
          if (response.ok) {
            alert("User deleted successfully");
            location.reload();
          } else {
            alert(data.errors || "Error deleting user");
          }
        });
      });
    </script>

    <script>
      document
        .getElementById("addCarForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();
          const formData = new FormData(this);

          // Basic validation
          if (
            !formData.get("make") ||
            !formData.get("model") ||
            !formData.get("price") ||
            !formData.get("stock") ||
            !formData.get("category")
          ) {
            alert("Please fill in all required fields");
            return;
          }

          // Send to backend
          const response = await fetch("/api/car", {
            method: "POST",
            body: formData,
          });
          const data = await response.json();

          if (response.ok) {
            alert("Car added successfully");
            location.reload(); // Refresh to show new car
          } else {
            alert(data.errors || "Error adding car");
          }
        });
    </script>

    <script>
      document.querySelectorAll(".delete-car").forEach((button) => {
        button.addEventListener("click", async function (e) {
          e.preventDefault();
          const carId = this.getAttribute("data-carId");
          if (!confirm("Are you sure you want to delete this car?")) return;
          const response = await fetch(`/api/car/${carId}`, {
            headers: {
              "Content-Type": "application/json",
            },
            method: "DELETE",
          });
          const data = await response.json();
          if (response.ok) {
            alert("Car deleted successfully");
            location.reload();
          } else {
            alert(data.errors || "Error deleting car");
          }
        });
      });
    </script>

    <script>
      // Dashboard Statistics and Charts
      async function updateDashboardStats() {
        try {
          // Fetch dashboard data
          const response = await fetch("/api/dashboard/stats");
          const data = await response.json();

          // Update statistics cards
          document.getElementById("totalUsers").textContent =
            data.totalUsers || 0;
          document.getElementById("totalCars").textContent =
            data.totalCars || 0;
          document.getElementById("totalOrders").textContent =
            data.totalOrders || 0;
          document.getElementById("totalRevenue").textContent = `$${
            data.totalRevenue || 0
          }`;

          // Monthly Overview Chart
          const monthlyCtx = document
            .getElementById("monthlyChart")
            .getContext("2d");
          new Chart(monthlyCtx, {
            type: "line",
            data: {
              labels: data.monthlyData?.labels || [],
              datasets: [
                {
                  label: "Orders",
                  data: data.monthlyData?.orders || [],
                  borderColor: "#4e73df",
                  tension: 0.1,
                },
                {
                  label: "Revenue",
                  data: data.monthlyData?.revenue || [],
                  borderColor: "#1cc88a",
                  tension: 0.1,
                },
              ],
            },
            options: {
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  display: true,
                },
              },
              scales: {
                y: {
                  beginAtZero: true,
                },
              },
            },
          });

          // Category Distribution Chart
          const categoryCtx = document
            .getElementById("categoryChart")
            .getContext("2d");
          new Chart(categoryCtx, {
            type: "doughnut",
            data: {
              labels: data.categoryData?.labels || [],
              datasets: [
                {
                  data: data.categoryData?.values || [],
                  backgroundColor: [
                    "#4e73df",
                    "#1cc88a",
                    "#36b9cc",
                    "#f6c23e",
                    "#e74a3b",
                    "#858796",
                    "#5a5c69",
                    "#2e59d9",
                    "#17a673",
                    "#2c9faf",
                  ],
                },
              ],
            },
            options: {
              maintainAspectRatio: false,
              plugins: {
                legend: {
                  position: "bottom",
                },
              },
            },
          });
        } catch (error) {
          console.error("Error fetching dashboard data:", error);
        }
      }

      // Call updateDashboardStats when the page loads
      document.addEventListener("DOMContentLoaded", () => {
        showPage("dashboard");
      });
    </script>

    <script>
      // Order Management Scripts
      document.querySelectorAll('.view-order').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          const orderId = this.getAttribute('data-orderId');
          
          try {
            const response = await fetch(`/api/order/${orderId}`);
            if (!response.ok) {
              throw new Error('Failed to fetch order details');
            }
            
            const data = await response.json();
            
            // Create modal element
            const modalHtml = `
              <div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                  <div class="modal-content">
                    <div class="modal-header">
                      <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                      <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                      <div class="row mb-3">
                        <div class="col-md-6">
                          <h6>Customer Information</h6>
                          <p>Name: ${data.user?.name || 'N/A'}</p>
                          <p>Email: ${data.user?.email || 'N/A'}</p>
                        </div>
                        <div class="col-md-6">
                          <h6>Order Information</h6>
                          <p>Order ID: ${data._id || 'N/A'}</p>
                          <p>Date: ${data.createdAt ? new Date(data.createdAt).toLocaleString() : 'N/A'}</p>
                          <p>Status: <span class="badge ${data.status === 'delivered' ? 'bg-success' : data.status === 'shipped' ? 'bg-info' : 'bg-warning'}">${data.status || 'N/A'}</span></p>
                        </div>
                      </div>
                      <h6>Order Items</h6>
                      <table class="table">
                        <thead>
                          <tr>
                            <th>Car</th>
                            <th>Price</th>
                            <th>Quantity</th>
                            <th>Subtotal</th>
                          </tr>
                        </thead>
                        <tbody>
                          ${data.items ? data.items.map(item => `
                            <tr>
                              <td>${item.car?.make} ${item.car?.model}</td>
                              <td>$${item.car?.price || 0}</td>
                              <td>${item.quantity || 0}</td>
                              <td>$${((item.car?.price || 0) * (item.quantity || 0)).toFixed(2)}</td>
                            </tr>
                          `).join('') : '<tr><td colspan="4" class="text-center">No items found</td></tr>'}
                        </tbody>
                        <tfoot>
                          <tr>
                            <td colspan="3" class="text-end"><strong>Total:</strong></td>
                            <td><strong>$${data.totalAmount || 0}</strong></td>
                          </tr>
                        </tfoot>
                      </table>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                  </div>
                </div>
              </div>
            `;

            // Remove any existing modal
            const existingModal = document.getElementById('orderDetailsModal');
            if (existingModal) {
              existingModal.remove();
            }

            // Add new modal to the document
            document.body.insertAdjacentHTML('beforeend', modalHtml);

            // Initialize and show the modal
            const modalElement = document.getElementById('orderDetailsModal');
            const modal = new bootstrap.Modal(modalElement);
            modal.show();

            // Clean up modal when it's hidden
            modalElement.addEventListener('hidden.bs.modal', function () {
              this.remove();
            });

          } catch (error) {
            console.error('Error:', error);
            alert('Error fetching order details. Please try again.');
          }
        });
      });

      // Add status update handler
      document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('change', async function(e) {
          const orderId = this.getAttribute('data-orderId');
          const newStatus = this.value;
          
          try {
            const response = await fetch(`/api/order/${orderId}/status`, {
              method: 'PUT',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ status: newStatus })
            });
            
            if (!response.ok) {
              throw new Error('Failed to update status');
            }
            
            // Update the badge in the modal if it's open
            const modal = document.getElementById('orderDetailsModal');
            if (modal) {
              const statusBadge = modal.querySelector('.badge');
              if (statusBadge) {
                statusBadge.textContent = newStatus;
                statusBadge.className = `badge ${newStatus === 'delivered' ? 'bg-success' : newStatus === 'shipped' ? 'bg-info' : 'bg-warning'}`;
              }
            }
            
          } catch (error) {
            console.error('Error:', error);
            alert('Error updating order status. Please try again.');
            // Reset the select to its previous value
            this.value = this.getAttribute('data-original-value');
          }
        });
      });

      // Store original value when focus
      document.querySelectorAll('.status-select').forEach(select => {
        select.addEventListener('focus', function() {
          this.setAttribute('data-original-value', this.value);
        });
      });

      // Add delete order functionality
      document.querySelectorAll('.delete-order').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          const orderId = this.getAttribute('data-orderId');
          
          if (!confirm('Are you sure you want to delete this order? This action cannot be undone.')) {
            return;
          }

          try {
            const response = await fetch(`/api/order/${orderId}`, {
              method: 'DELETE',
              headers: {
                'Content-Type': 'application/json'
              }
            });

            if (!response.ok) {
              throw new Error('Failed to delete order');
            }

            // Show success message
            alert('Order deleted successfully');
            
            // Remove the row from the table
            const row = this.closest('tr');
            row.remove();

            // Update the total orders count
            const totalOrdersElement = document.getElementById('totalOrders');
            if (totalOrdersElement) {
              const currentTotal = parseInt(totalOrdersElement.textContent);
              totalOrdersElement.textContent = currentTotal - 1;
            }

          } catch (error) {
            console.error('Error:', error);
            alert('Error deleting order. Please try again.');
          }
        });
      });
    </script>

    <script>
      // Edit User Functionality
      document.querySelectorAll('.edit-user').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          const userId = this.getAttribute('data-userId');
          
          try {
            // Fetch user data
            const response = await fetch(`/api/user/${userId}`);
            if (!response.ok) {
              throw new Error('Failed to fetch user data');
            }
            
            const userData = await response.json();
            
            // Populate the edit form
            document.getElementById('editUserId').value = userId;
            document.getElementById('editUserName').value = userData.name;
            document.getElementById('editUserEmail').value = userData.email;
            document.getElementById('editUserRole').value = userData.role;
            
            // Show the modal
            const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));
            editUserModal.show();
            
          } catch (error) {
            console.error('Error:', error);
            alert('Error fetching user data. Please try again.');
          }
        });
      });

      // Handle edit user form submission
      document.getElementById('editUserForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const userId = document.getElementById('editUserId').value;
        const formData = new FormData(this);
        const userData = {
          name: formData.get('name'),
          email: formData.get('email'),
          role: formData.get('role')
        };

        try {
          const response = await fetch(`/api/user/${userId}`, {
            method: 'PUT',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(userData)
          });

          if (!response.ok) {
            throw new Error('Failed to update user');
          }

          alert('User updated successfully');
          location.reload();
        } catch (error) {
          console.error('Error:', error);
          alert('Error updating user. Please try again.');
        }
      });

      // Edit Car Functionality
      document.querySelectorAll('.edit-car').forEach(button => {
        button.addEventListener('click', async function(e) {
          e.preventDefault();
          const carId = this.getAttribute('data-carId');
          
          try {
            // Fetch car data
            const response = await fetch(`/api/car/${carId}`);
            if (!response.ok) {
              throw new Error('Failed to fetch car data');
            }
            
            const carData = await response.json();
            
            // Populate the edit form
            document.getElementById('editCarId').value = carId;
            document.getElementById('editCarMake').value = carData.make || '';
            document.getElementById('editCarModel').value = carData.model || '';
            document.getElementById('editCarPrice').value = carData.price || '';
            document.getElementById('editCarStock').value = carData.stock || '';
            document.getElementById('editCarDescription').value = carData.description || '';
            document.getElementById('editCarCategory').value = carData.category || '';
            
            // Show current image if exists
            const currentImageDiv = document.getElementById('currentCarImage');
            if (carData.image) {
              currentImageDiv.innerHTML = `
                <p class="mb-2">Current Image:</p>
                <img src="${carData.image}" alt="Current Car" class="car-image-preview">
              `;
            } else {
              currentImageDiv.innerHTML = '';
            }
            
            // Show the modal
            const editCarModal = new bootstrap.Modal(document.getElementById('editCarModal'));
            editCarModal.show();
            
          } catch (error) {
            console.error('Error:', error);
            alert('Error fetching car data. Please try again.');
          }
        });
      });

      // Handle edit car form submission
      document.getElementById('editCarForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        const carId = document.getElementById('editCarId').value;
        const formData = new FormData(this);

        try {
          const response = await fetch(`/api/car/${carId}`, {
            method: 'PUT',
            body: formData
          });

          if (!response.ok) {
            throw new Error('Failed to update car');
          }

          alert('Car updated successfully');
          location.reload();
        } catch (error) {
          console.error('Error:', error);
          alert('Error updating car. Please try again.');
        }
      });
    </script>
  </body>
</html>
